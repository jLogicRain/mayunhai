(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{196:function(a,t,e){"use strict";e.r(t);var r=e(0),v=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"名词解释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#名词解释","aria-hidden":"true"}},[a._v("#")]),a._v(" 名词解释")]),a._v(" "),e("p",[a._v("本博客主要分析web前端开发相关技术文章，尽可能地用最直白简单的白话去描述介绍")]),a._v(" "),e("h2",{attrs:{id:"web前端开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web前端开发","aria-hidden":"true"}},[a._v("#")]),a._v(" web前端开发")]),a._v(" "),e("p",[a._v("web前端开发通俗易懂的解释就是写网站页面的，这里需要强调一点像微信公众号，小程序甚至部分APP所看到页面都是有web前端开发制作的")]),a._v(" "),e("h2",{attrs:{id:"web前端三大技术的个人理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web前端三大技术的个人理解","aria-hidden":"true"}},[a._v("#")]),a._v(" web前端三大技术的个人理解")]),a._v(" "),e("p",[a._v("html(骨架)、css(皮肉)、javascript(灵魂)")]),a._v(" "),e("h2",{attrs:{id:"web前端与后端的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web前端与后端的区别","aria-hidden":"true"}},[a._v("#")]),a._v(" web前端与后端的区别")]),a._v(" "),e("p",[a._v("可以说你看到的所有页面都是用前端构造的，那么为什么要有后端呢？举个例子淘宝有上千万个页面，我们没法再服务器真的就去写上千万的静态页面给用户去看，只有写上一套通用模板，然后配合后端程序读取数据库信息生产那么多页面")]),a._v(" "),e("h2",{attrs:{id:"mvc-mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvc-mvvm","aria-hidden":"true"}},[a._v("#")]),a._v(" MVC && MVVM")]),a._v(" "),e("p",[a._v("MVVM实际上是MVC升级版，先了解MVC之后，再去理解MVVM易如反掌")]),a._v(" "),e("h4",{attrs:{id:"mvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvc","aria-hidden":"true"}},[a._v("#")]),a._v(" MVC")]),a._v(" "),e("p",[a._v("一个应用程序最主要的构成部分就是用于人机交互的\n"),e("strong",[a._v("视图(view)")]),a._v("\n和服务器里面的数据处理，对于web前端开发人员而已理解视图轻而易举，\n"),e("strong",[a._v("模型(model)")]),a._v("\n通俗理解就是服务器数据库上的增删改查，\n"),e("strong",[a._v("控制器(controller)")]),a._v("\n则是两者之间的桥梁。MVC的协同作用下完成了一个应用程序，这种模式极为传统而且市场占比也是挺高，虽然目前MVVM的趋势已经很明显，但是还是有很多老的项目一直在用MVC")]),a._v(" "),e("h4",{attrs:{id:"mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm","aria-hidden":"true"}},[a._v("#")]),a._v(" MVVM")]),a._v(" "),e("p",[a._v("MVVM,简单粗暴的理解就是用VM\n"),e("strong",[a._v("(视图模型ViewModel)")]),a._v("\n替代了MVC里面的C\n"),e("strong",[a._v("(控制器controller)")]),a._v("\n，ViewModel其实就是为View量身定制的一个model主要靠前端代码完成。MVVM 模式便是使用的是数据绑定基础架构")]),a._v(" "),e("p",[a._v("从实际开发角度来说，可以简单的理解为MVC模式下本该后端做的控制器，模板引擎(套数据)甚至路由全部交给前端通过前端框架数据绑定去完成")]),a._v(" "),e("p",[a._v("这样的好处在于真正意义上前后端分离，前后端可以更加专注自己的领域。后端专注开发接口和数据库，前端专注交互体验。还有一点则是原本很多判断以及一些简单逻辑计算都是在后端服务器来完成的，现在全部放在了前端，明显可以减轻服务器的压力，也行有人会觉得那些判断计算量不足为题，但是我想说积羽沉舟的道理大家都懂")]),a._v(" "),e("h2",{attrs:{id:"spa"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spa","aria-hidden":"true"}},[a._v("#")]),a._v(" SPA")]),a._v(" "),e("p",[a._v("单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序"),e("br")]),a._v(" "),e("p",[e("strong",[a._v("特点")])]),a._v(" "),e("blockquote",[e("p",[a._v("速度：更好的用户体验，让用户在web app感受native app的速度和流畅"),e("br"),a._v("\nMVVM：经典MVVM开发模式，前后端各负其责"),e("br"),a._v("\najax：重前端，业务逻辑全部在本地操作，数据都需要通过AJAX同步、提交"),e("br"),a._v("\n路由：在URL中采用#号来作为当前视图的地址,改变#号后的参数，页面并不会重载 —— 摘自 百度百科")])]),a._v(" "),e("p",[a._v("缺点呢由于单页应用体量比较大，所以缺点就是首屏速度有些慢，不过这个在目前大部分硬件都较为优秀的移动互联网时代这些都不算什么大问题，其实在我刚做前端时候就想过早晚有一天会出现一个NB的网站不再会有跳转全部用ajax来无刷新体验一切，没想到到来的这么快")]),a._v(" "),e("h2",{attrs:{id:"api（接口）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api（接口）","aria-hidden":"true"}},[a._v("#")]),a._v(" API（接口）")]),a._v(" "),e("p",[a._v("对刚入门的小伙伴来说一开始理解接口这个词有点难度，尤其是起手学了 PHP 的 "),e("code",[a._v("interface")]),a._v(" 之后更是一脸懵逼，其实很容易理解，你可以把它当做一个方法，你给它入参然后它就会返回你想要的东西，或者实现你想要的功能就是这么简单。")]),a._v(" "),e("p",[e("strong",[a._v("这里需要强调一点，很多人在学习echart或者VUE的时候在官网常常会看到 "),e("code",[a._v("API")]),a._v(" 这样的链接，点进去是接口文档，就误以为 "),e("code",[a._v("API === '文档'")])])]),a._v(" "),e("h2",{attrs:{id:"语法糖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法糖","aria-hidden":"true"}},[a._v("#")]),a._v(" 语法糖")]),a._v(" "),e("p",[a._v("百度百科上面说了一大堆个人觉得比较难懂，其实最直白的说法语法糖不过是你代码中的一种简写")])])}],!1,null,null,null);t.default=v.exports}}]);